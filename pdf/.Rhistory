exp(-1.00239 - 0.05029+0.65708+0.00552)
exp(-1.00239 - 0.05029+0.69723-0.00983)
exp(-1.00239 - 0.05029+0.73058+0.01086)
exp(-1.00239 - 0.05029+0.73005+0.02269)
exp(-1.00239 - 0.07055)
exp(-1.00239 - 0.07055)
exp(-1.00239 - 0.07055 + 0.19046 +0.01021)
exp(-1.00239 - 0.07055 + 0.34847 + 0.03133)
exp(-1.00239 - 0.07055 + 0.50810 -0.01676 )
exp(-1.00239 - 0.07055 +0.54194-0.01278)
exp(-1.00239 - 0.07055 +0.65708-0.05593)
exp(-1.00239 - 0.07055 +0.69723-0.07543)
exp(-1.00239 - 0.07055 +0.73058-0.03887)
exp(-1.00239 - 0.07055 +0.73005+0.01298)
exp(-1.00239 -0.07348)
exp(-1.00239 -0.07348+0.19046-0.00132 )
exp(-1.00239 -0.07348+0.34847-0.00656)
exp(-1.00239 -0.07348+ 0.50810 -0.02462)
exp(-1.00239 -0.07348+ 0.54194-0.01946)
exp(-1.00239 -0.07348+ 0.65708+0.00176)
exp(-1.00239 -0.07348+ 0.69723-0.02482)
exp(-1.00239 -0.07348+ 0.73058-0.01425)
exp(-1.00239 -0.07348+ 0.73005+0.00474)
exp(-1.00239 -0.04458)
exp(-1.00239 -0.04458 + 0.19046-0.01338)
exp(-1.00239 -0.04458 + 0.34847+0.00735)
exp(-1.00239 -0.04458 + 0.50810 -0.07177)
exp(-1.00239 -0.04458 + 0.54194-0.05709)
exp(-1.00239 -0.04458 + 0.65708-0.08493)
exp(-1.00239 -0.04458 + 0.69723-0.07797)
exp(-1.00239 -0.04458 + 0.73058-0.08694)
exp(-1.00239 -0.04458 + 0.73005 -0.06236)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(knitr)
summary(fit_log)
library(geepack)
library(lattice)
library(car)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
plot(density(fit_sal$residuals))
summary(fit_sal)
library(geepack)
library(lattice)
library(car)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "unstructured", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
plot(density(fit_sal$residuals))
summary(fit_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento + Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo",grid = F)
summary(fit_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$residuals, fit_sal$fitted.values)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$residuals, fit_sal$fitted.values)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$residuals, fit_sal$fitted.values)
hist(fit_sal$residuals)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gamma(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = Gamma(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
hist(fit_sal$residuals)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = Gamma(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$residuals, fit_sal$fitted.values)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$residuals, fit_sal$fitted.values)
hist(fit_sal$residuals)
min(fit_sal$residuals)
max(fit_sal$residuals)
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", ylim = c(-0.3, 0.6), main = "Resíduos x valores ajustados")
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", ylim = c(-0.3, 0.8), main = "Resíduos x valores ajustados")
min(fit_sal$residuals)
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", ylim = c(0, 0.8), main = "Resíduos x valores ajustados")
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", ylim = c(0.2, 0.8), main = "Resíduos x valores ajustados")
plot(fit_sal$residuals, fit_sal$fitted.values,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repetição, corstr = "ar1", data = data_compact_sal)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
#plot(density(fit_sal$residuals))
summary(fit_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
#plot(density(fit_sal$residuals))
summary(fit_sal)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
hist(fit_sal$residuals)
plot(density(fit_sal$residuals))
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
hist(fit_sal$residuals,freq = F, main = "Histograma dos resíduos modelo 1", xlab = "Resíduos", ylab = "Densidade")
hist(fit_sal$residuals,freq = F, main = "Histograma dos resíduos", xlab = "Resíduos", ylab = "Densidade")
plot(density(fit_sal$residuals))
bwplot(data_compact_sal$Tratamento ~ fit_sal$residuals, xlab = "Modelo")
bwplot(data_compact_nano$Tratamento ~ fit$residuals, xlab = "Modelo 1")
bwplot(data_compact_nano$Tratamento ~ fit_log$residuals, xlab = "Resíduos modelo 2")
bwplot(data_compact_nano$Dia ~ fit$residuals, xlab = "Modelo 1")
bwplot(data_compact_nano$Dia ~ fit_log$residuals, xlab = "Modelo 2")
bwplot(data_compact_sal$Dia ~ fit_sal$residuals, xlab = "Resíduos")
fit_sal <- geeglm(Comprimento ~ Tratamento+Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
hist(fit_sal$residuals,freq = F, main = "Histograma dos resíduos", xlab = "Resíduos", ylab = "Densidade")
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
plot(fit_sal$fitted.values, fit_sal$residuals,ylab = "Resíduos do modelo", xlab = "Valores ajustados", main = "Resíduos x valores ajustados")
hist(fit_sal$residuals,freq = F, main = "Histograma dos resíduos", xlab = "Resíduos", ylab = "Densidade")
bwplot((data_compact_sal$Dia & data_compact_sal$Tratamento) ~ fit_sal$residuals, xlab = "Resíduos")
bwplot(data_compact_sal$Dia  ~ fit_sal$residuals, xlab = "Resíduos")
bwplot(data_compact_sal$Tratamento ~ fit_sal$residuals, xlab = "Resíduos")
summary(fit_sal)
library(xtable)
xtable::xtable(coef(summary(fit_sal)))
xtable(coef(summary(fit_sal)))
xtable(coef(summary(fit_sal)))
summary(fit_sal)
summary(fit_sal)
fit_sal <- geeglm(Comprimento ~ Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
library(rmarkdown)
render('lala.Rmd')
render('projectHelena.Rmd')
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown", force = T)
library(rmarkdown)
require(rmarkdown)
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"), type = "source")
version()
version
install.packages("pander")
library(pander)
sessionInfo()
install.packages("utf8")
install.packages("utf8latex")
sessionInfo()
library(utf8)
library(utf8latex)
sessionInfo()
install.packages(c("aroma.core", "car", "checkmate", "data.table", "glue", "lazyeval", "multcomp", "openssl", "PSCBS", "quantreg", "R.utils", "RcppEigen", "rlang", "stringi", "tidyselect", "withr"))
install.packages(c("aroma.core", "PSCBS"))
library(readxl)
library(dplyr)
library(ggplot2)
data_compact_nano <- as.data.frame(read_excel("/home/hugo/Documentos/ME810/HELENA/projectHelena/dados/nanoparticulas_dadosR.xlsx"))
data_compact_nano$Tratamento <- as.factor(data_compact_nano$Tratamento)
data_compact_nano$Comprimento <- as.numeric(data_compact_nano$Comprimento)
data_compact_nano$Dia <- as.factor(data_compact_nano$Dia)
data_compact_nano$Repeticao <- as.factor(data_compact_nano$Repeticao)
data_compact_sal <- as.data.frame(read_excel("/home/hugo/Documentos/ME810/HELENA/projectHelena/dados/saldezinco_dadosR.xlsx"))
data_compact_sal$Tratamento <- as.factor(data_compact_sal$Tratamento)
data_compact_sal$Comprimento <- as.numeric(data_compact_sal$Comprimento)
data_compact_sal$Dia <- as.factor(data_compact_sal$Dia)
data_compact_sal$Repetição <- as.factor(data_compact_sal$Repetição)
#Omissão dos dados faltantes; estes dados faltantes são aqueles considerados como "Morta"
data_compact_nano <- na.omit(data_compact_nano)
data_compact_sal <- na.omit(data_compact_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
library(geepack)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
require(car)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
qqPlot(fit_sal$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal",grid = F)
#plot(density(fit_sal$residuals))
#summary(fit_sal)
summary(fit_sal)
#fit_new <- geeglm(Comprimento ~ Tratamento + Dia, family = gaussian(link = "log"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
#fit_new <- geeglm(Comprimento ~ Tratamento + Dia, family = gaussian(link = "inverse"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
fit_log <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
qqPlot(fit_log$residuals,ylab = "Quantil dos resíduos", xlab = "Quantil normal", main = "Gráfico de quantil residual e quantil teórico normal modelo 2",grid = F)
summary(fit_log)
?glm
#fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = poisson(link = "log"), id = Repeticao, corstr = "independence", data = data_compact_nano)
teste <- glm(Numero_ovos ~ Tratamento*Dia, family = poisson(link = "log"), data = data_compact_nano)
teste
summary(teste)
#library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = quasipoisson(link = "log"), id = Repeticao, corstr = "independence", data = data_compact_nano)
library(geepack)
#library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = quasipoisson(link = "log"), id = Repeticao, corstr = "independence", data = data_compact_nano)
#library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = poisson(link = "inverse"), id = Repeticao, corstr = "independence", data = data_compact_nano)
#library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = poisson(link = "sqrt"), id = Repeticao, corstr = "independence", data = data_compact_nano)
#library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento*Dia, family = poisson(link = "identity"), id = Repeticao, corstr = "independence", data = data_compact_nano)
library(geepack)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
confint(fit_sal)
confint(fit_sal$coefficients)
fit_sal$coefficients
coef(fit_sal)
length(coef(fit_sal))
coef(fit_sal)[1:54]
coef(fit_sal)[[1]]
coef(fit_sal)[[1:54]]
coef(fit_sal)[[c(1:54)]]
install.packages("MCMCglmm")
rm(teste)
library(geepack)
fit_ovos_nano <- geeglm(Numero_ovos ~ Tratamento + Dia, family = poisson(), id = Repeticao, corstr = "independence", data = data_compact_nano)
summary(fit_ovos_nano)
library(MCMCglmm)
?MCMCglmm
teste <- MCMCglmm(fixed = Dia + Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(fixed =  Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(Numero_ovos ~ Dia + Tratamento, fixed = Dia + Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(data_compact_nano$Numero_ovos ~ data_compact_nano$Dia + data_compact_nano$Tratamento, fixed = Dia + Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
mod <- Numero_ovos ~ Dia + Tratamento
teste <- MCMCglmm(mod, fixed = Dia + Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(mod, fixed = c(Dia, Tratamento), random = Repeticao, family = "zipoisson", data = data_compact_nano)
mod <- Numero_ovos ~ Tratamento
teste <- MCMCglmm(mod, fixed = Tratamento, random = Repeticao, family = "zipoisson", data = data_compact_nano)
fixos <- cbind(data_compact_nano$Dia, data_compact_nano$Tratamento)
fixos
head(fixos)
View(fit_sal)
View(fixos)
colnames(fixos) <- c("Dia", "Tratamento")
View(fixos)
fixos[,1]
fixos <- cbind(as.factor(data_compact_nano$Dia), as.factor(data_compact_nano$Tratamento))
colnames(fixos) <- c("Dia", "Tratamento")
fixos[,1] <- as.factor(fixos[,1])
View(fixos)
class(data_compact_nano$Dia)
fixos <- as.matrix(data_compact_nano$Dia, data_compact_nano$Tratamento)
colnames(fixos) <- c("Dia", "Tratamento")
View(fixos)
fixos <- cbind(data_compact_nano$Dia, data_compact_nano$Tratamento)
colnames(fixos) <- c("Dia", "Tratamento")
aleatorio <- data_compact_nano$Repeticao
teste <- MCMCglmm(mod, fixed = fixos, random = aleatorio, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(mod, random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(mod, random = aleatorio, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(mod, random = ~aleatorio, family = "zipoisson", data = data_compact_nano)
rm(fixos)
rm(aleatorio)
rm(mod)
fixo <-
teste <- MCMCglmm(Numero_ovos~Dia+Tratamento, family = "zipoisson", data = data_compact_nano)
fixo <-
teste <- MCMCglmm(Numero_ovos~(Dia+Tratamento), random = Repeticao, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(data_compact_nano$Numero_ovos ~ data_compact_nano$Dia + data_compact_nano$Tratamento, data = data_compact_nano)
teste <- MCMCglmm(data_compact_nano$Numero_ovos ~ data_compact_nano$Dia + data_compact_nano$Tratamento, family = "zipoisson", data = data_compact_nano)
teste <- MCMCglmm(Numero_ovos ~ Dia + Tratamento, family = "zipoisson", data = data_compact_nano)
?TukeyHSD
l <- geese(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
l$vbeta
l$beta
fit <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
l$beta == fit$coefficients
gee.testeF.CBM.MLG <- function(glm.fit.model,geese.fit.model,m.C,m.M)
{
v.beta <-  cbind(glm.fit.model$coef)
e.q <- nrow(m.C)
m.cov.beta <- (geese.fit.model$vbeta)
e.Q <- t(m.C%*%v.beta-m.M)%*%solve(m.C%*%m.cov.beta%*%t(m.C))%*%(m.C%*%v.beta-m.M)
e.pvalor <- 1-pchisq(e.Q,e.q)
cat("Estatistica Q = ",round(e.Q,2),"\n")
cat("gl = ",e.q,"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
#cat("Matriz C :","\n")
#print(m.C)
#cat("Matriz M :","\n")
#print(m.M)
}
coef(fit)
dim(l$vbeta)
m.c <- c(0,0,1,-1, rep(0,50))
m.c
length(m.c)
m.c <- as.matrix(c(0,0,1,-1, rep(0,50)))
m.c
m.c <- t(as.matrix(c(0,0,1,-1, rep(0,50))))
m.c
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
m.c <- t(as.matrix(c(0,1,-1, 0, rep(0,50)))) #teste para a diferença entre o tratamento 1 e 2
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
coef(fit)
m.c <- t(as.matrix(c(0,1,0,-1, rep(0,50)))) #teste para a diferença entre o tratamento 1 e 3
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
m.c
m.c <- t(as.matrix(c(0,1,-1, 0, rep(0,50)))) #teste para a diferença entre o tratamento 1 e 2
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
m.c <- t(as.matrix(c(0,1,0,-1, rep(0,50)))) #teste para a diferença entre o tratamento 1 e 3
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
m.c <- t(as.matrix(c(0,1,0,0, -1, rep(0,49)))) #teste para a diferença entre o tratamento 1 e 4
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
m.c <- t(as.matrix(c(0,1,0,0, 0, -1, rep(0,48)))) #teste para a diferença entre o tratamento 1 e 5
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
t(as.matrix(c(0,1,-1, 0, rep(0,50)),c(0,1,0,-1, rep(0,50)) ))
m.c <- t(as.matrix(c(0,1,-1, 0, rep(0,50)),c(0,1,0,-1, rep(0,50)) )) #teste para a diferença entre o tratamento 1 e 2
m.c
dim(m.c)
m.c <- t(as.matrix(c(0,1,-1, 0, rep(0,50)),c(0,1,0,-1, rep(0,50)), nrow = 2 )) #teste para a diferença entre o tratamento 1 e 2
dim(m.c)
m.c <- t(as.matrix( rbind(c(0,1,-1, 0, rep(0,50)),c(0,1,0,-1, rep(0,50))) ) ) #teste para a diferença entre o tratamento 1 e 2
dim(m.c)
c(0,1,-1, 0, rep(0,50))
m.c <- t(as.matrix( rbind(t(c(0,1,-1, 0, rep(0,50))),t(c(0,1,0,-1, rep(0,50)))) ) ) #teste para a diferença entre o tratamento 1 e 2
dim(m.c)
t(c(0,1,-1, 0, rep(0,50))),t(c(0,1,0,-1, rep(0,50))))
t(c(0,1,-1, 0, rep(0,50))),t(c(0,1,0,-1, rep(0,50)))
m.c <- t(as.matrix( c(0,1,-1, 0, rep(0,50)),c(0,1,0,-1, rep(0,50))) ) #teste para a diferença entre o tratamento 1 e 2
m.M <- 0
gee.testeF.CBM.MLG(fit, l, m.c, m.M)
C <- rbind(l12, l13, l14,l15)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
dim(C)
View(C)
M <- t(c(rep(0,4)))
M
M <- t(as.matrix(c(rep(0,4))))
M
M <- t(t(as.matrix(c(rep(0,4)))))
M
gee.testeF.CBM.MLG(fit, l, C, M)
library(geepack)
library(lattice)
library(car)
source("gee_teste.R")
l <- geese(Comprimento ~ Tratamento*Dia, family = gaussian(link = "inverse"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
View(C)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,4)))))
gee.testeF.CBM.MLG(fit, l, C, M)
l23 <- c(0,0,1, -1, rep(0,50))
l24 <- c(0,0,1,0, -1, rep(0,49))
l25 <- c(0,0,1,0, 0, -1, rep(0,48))
C <- rbind(l23,l24,l25)
M <- t(t(as.matrix(c(rep(0,4)))))
M
M <- t(t(as.matrix(c(rep(0,3)))))
M
M <- t(t(as.matrix(c(rep(0,3)))))
gee.testeF.CBM.MLG(fit, l, C, M)
fit_log <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
summary(fit_log)
C <- rbind(l12, l13, l14,l15, l23, l24,l25)
M <- t(t(as.matrix(c(rep(0,7)))))
gee.testeF.CBM.MLG(fit, l, C, M)
M <- t(t(as.matrix(c(rep(0,7)))))
M
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,7)))))
gee.testeF.CBM.MLG(fit, l, C, M)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,7)))))
gee.testeF.CBM.MLG(fit, l, C, M)
M <- t(t(as.matrix(c(rep(0,4)))))
gee.testeF.CBM.MLG(fit, l, C, M)
l <- geese(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repeticao, corstr = "ar1", data = data_compact_nano)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,4)))))
gee.testeF.CBM.MLG(fit_log, l, C, M)
l23 <- c(0,0,1, -1, rep(0,50))
l24 <- c(0,0,1,0, -1, rep(0,49))
l25 <- c(0,0,1,0, 0, -1, rep(0,48))
C <- rbind(l23,l24,l25)
M <- t(t(as.matrix(c(rep(0,3)))))
gee.testeF.CBM.MLG(fit_log, l, C, M)
l34 <- c(0,0,0, 1, -1, rep(0,49))
l35 <- c(0,0,0,1, 0, -1, rep(0,48))
C <- rbind(l34,l35)
M <- t(t(as.matrix(c(rep(0,2)))))
gee.testeF.CBM.MLG(fit_log, l, C, M)
C <- c(0,0,0,0, 1, -1, rep(0,48))
M <- 0
gee.testeF.CBM.MLG(fit_log, l, C, M)
C <- cbind(c(0,0,0,0, 1, -1, rep(0,48)))
C <- t(t(c(0,0,0,0, 1, -1, rep(0,48))))
C
C <- t(c(0,0,0,0, 1, -1, rep(0,48)))
C
M <- 0
gee.testeF.CBM.MLG(fit_log, l, C, M)
l
summary(l)
l12 <- c(0,1,-1, 0, rep(0,50))
l12 <- t(t(l12))
l12
l12 <- t(l12)
l12
l12 <- t(l12), M = 0
M = 0
gee.testeF.CBM.MLG(fit_log, l, C, M)
l$beta
l$beta == coef(fit_log)
table(l$beta == coef(fit_log))
l <- geese(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repeticao, corstr = "ar1", data = data_compact_sal)
l <- geese(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
fit_sal <- geeglm(Comprimento ~ Tratamento*Dia, family = gaussian(link = "log"), id = Repetição, corstr = "ar1", data = data_compact_sal)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,4)))))
gee.testeF.CBM.MLG(fit_sal, l, C, M)
l12 <- t(c(0,1,-1, 0, rep(0,50)))
l12 <- t(c(0,1,-1, 0, rep(0,50)))
M <- 0
gee.testeF.CBM.MLG(fit_sal, l, C, M)
l12 <- t(c(0,1,-1, 0, rep(0,50)))
M <- 0
gee.testeF.CBM.MLG(fit_sal, l12, C, M)
l12 <- t(c(0,1,-1, 0, rep(0,50)))
M <- 0
gee.testeF.CBM.MLG(fit_sal, l, l12, M)
gee.testeF.CBM.MLG(fit_sal, l, l13, M)
M <- 0
gee.testeF.CBM.MLG(fit_sal, l, l13, M)
l12 <- t(c(0,1,-1, 0, rep(0,50)))
M <- 0
gee.testeF.CBM.MLG(fit_sal, l, l12, M)
gee.testeF.CBM.MLG(fit_sal, l, l13, M)
l12 <- t(c(0,1,-1, 0, rep(0,50)))
gee.testeF.CBM.MLG(fit_sal, l, l12, M)
l13 <- t(c(0,1,0,-1, rep(0,50))) #
gee.testeF.CBM.MLG(fit_sal, l, l13, M)
l14 <- t(c(0,1,0,0, -1, rep(0,49)))
gee.testeF.CBM.MLG(fit_sal, l, l14, M)
l15 <- t(c(0,1,0,0, 0, -1, rep(0,48)))
gee.testeF.CBM.MLG(fit_sal, l, l15, M)
summary(fit_sal)
l12 <- c(0,1,-1, 0, rep(0,50))
l13 <- c(0,1,0,-1, rep(0,50))
l14 <- c(0,1,0,0, -1, rep(0,49))
l15 <- c(0,1,0,0, 0, -1, rep(0,48))
C <- rbind(l12, l13, l14,l15)
M <- t(t(as.matrix(c(rep(0,4)))))
gee.testeF.CBM.MLG(fit_sal, l, C, M)
l23 <- c(0,0,1, -1, rep(0,50))
l24 <- c(0,0,1,0, -1, rep(0,49))
l25 <- c(0,0,1,0, 0, -1, rep(0,48))
C <- rbind(l23,l24,l25)
M <- t(t(as.matrix(c(rep(0,3)))))
gee.testeF.CBM.MLG(fit_sal, l, C, M)
l34 <- c(0,0,0, 1, -1, rep(0,49))
l35 <- c(0,0,0,1, 0, -1, rep(0,48))
C <- rbind(l34,l35)
M <- t(t(as.matrix(c(rep(0,2)))))
gee.testeF.CBM.MLG(fit_log, l, C, M)
l34 <- c(0,0,0, 1, -1, rep(0,49))
l35 <- c(0,0,0,1, 0, -1, rep(0,48))
C <- rbind(l34,l35)
M <- t(t(as.matrix(c(rep(0,2)))))
gee.testeF.CBM.MLG(fit_log, l, C, M)
C <- t(c(0,0,0,0, 1, -1, rep(0,48)))
M <- 0
gee.testeF.CBM.MLG(fit_log, l, C, M)
data_compact_nano <- as.data.frame(read_excel("/home/hugo/Documentos/ME810/HELENA/projectHelena/dados/nanoparticulas_dadosR.xlsx"))
library(readxl)
library(dplyr)
data_compact_nano <- as.data.frame(read_excel("/home/hugo/Documentos/ME810/HELENA/projectHelena/dados/nanoparticulas_dadosR.xlsx"))
